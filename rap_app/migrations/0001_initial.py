# Generated by Django 4.2.7 on 2025-03-27 18:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Centre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom', models.CharField(help_text='Nom complet du centre de formation (doit être unique)', max_length=255, unique=True, verbose_name='Nom du centre')),
                ('code_postal', models.CharField(blank=True, help_text='Code postal à 5 chiffres du centre', max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Le code postal doit contenir exactement 5 chiffres', regex='^\\d{5}$')], verbose_name='Code postal')),
                ('objectif_annuel_prepa', models.PositiveIntegerField(blank=True, null=True)),
                ('objectif_hebdomadaire_prepa', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Centre',
                'verbose_name_plural': 'Centres',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Commentaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('contenu', models.TextField(verbose_name='Contenu du commentaire')),
                ('saturation', models.PositiveIntegerField(blank=True, null=True, verbose_name='Niveau de saturation (%)')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
                'ordering': ['formation', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="Nom de l'entreprise", max_length=100, null=True, verbose_name='Nom')),
                ('street_name', models.CharField(blank=True, help_text='Exemple: 123 rue de la République', max_length=200, null=True, verbose_name='Numéro et nom de la rue')),
                ('zip_code', models.CharField(blank=True, help_text='Code postal à 5 chiffres', max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Le code postal doit être composé de 5 chiffres.', regex='^[0-9]{5}$')], verbose_name='Code postal')),
                ('city', models.CharField(blank=True, help_text='Ville du siège social', max_length=100, null=True, verbose_name='Ville')),
                ('country', models.CharField(blank=True, default='France', max_length=100, null=True, verbose_name='Pays')),
                ('contact_name', models.CharField(blank=True, help_text='Nom et prénom du contact principal', max_length=255, null=True, verbose_name='Nom du contact')),
                ('contact_email', models.EmailField(blank=True, help_text='Email professionnel du contact', max_length=254, null=True, verbose_name='Adresse email du contact')),
                ('contact_phone_number', models.CharField(blank=True, help_text='Format: 06XXXXXXXX ou +33XXXXXXXXX', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Entrez un numéro de téléphone français valide commençant par 01, 02, ..., 06 ou 07.', regex='^(0[1-9]\\d{8})$|^(?:\\+33|0033)[1-9]\\d{8}$')], verbose_name='Numéro de téléphone du contact')),
                ('contact_job', models.CharField(blank=True, help_text='Fonction ou poste du contact', max_length=255, null=True, verbose_name='Métier du contact')),
                ('sector_name', models.CharField(blank=True, help_text="Domaine d'activité principal de l'entreprise", max_length=200, null=True, verbose_name="Secteur d'activité")),
                ('actions', models.CharField(blank=True, choices=[('recrutement_emploi', 'Recrutement - Emploi'), ('recrutement_stage', 'Recrutement - Stage'), ('recrutement_apprentissage', 'Recrutement - Apprentissage'), ('presentation_metier_entreprise', 'Présentation de métier(s)/entreprise'), ('visite_entreprise', "Visite de l'entreprise"), ('coaching', 'Coaching'), ('autre', 'Autre'), ('partenariat', 'Partenariat'), ('non_definie', 'Non définie')], help_text="Type d'interaction possible avec cette entreprise", max_length=50, null=True, verbose_name='Actions')),
                ('action_description', models.CharField(blank=True, help_text="Détails sur l'action ou l'opportunité", max_length=5000, null=True, verbose_name="Description de l'action")),
                ('website', models.URLField(blank=True, help_text="Site web de l'entreprise (avec http:// ou https://)", null=True, validators=[django.core.validators.RegexValidator(message="L'URL doit commencer par http:// ou https://", regex='^(http|https)://')])),
                ('social_network_url', models.CharField(blank=True, help_text="Lien vers le profil de l'entreprise sur un réseau social", max_length=200, null=True, verbose_name='URL du réseau social')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Contact créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Date de MAJ')),
            ],
            options={
                'verbose_name': 'entreprise',
                'verbose_name_plural': 'entreprises',
                'db_table': 'companies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom_fichier', models.CharField(db_index=True, help_text="Nom du fichier tel qu'il apparaîtra dans l'interface", max_length=255, verbose_name='Nom du fichier')),
                ('fichier', models.FileField(help_text='Fichier à télécharger (types acceptés selon la catégorie)', upload_to='formations/documents/', verbose_name='Fichier')),
                ('source', models.TextField(blank=True, help_text='Source ou origine du document (optionnel)', null=True, verbose_name='Source du document')),
                ('type_document', models.CharField(choices=[('pdf', 'PDF'), ('image', 'Image'), ('contrat', 'Contrat signé'), ('autre', 'Autre')], default='autre', help_text='Catégorie du document déterminant les types de fichiers acceptés', max_length=20, verbose_name='Type de document')),
                ('taille_fichier', models.PositiveIntegerField(blank=True, help_text='Taille du fichier en Ko (calculée automatiquement)', null=True, verbose_name='Taille du fichier (Ko)')),
                ('mime_type', models.CharField(blank=True, help_text='Type MIME détecté automatiquement', max_length=100, null=True, verbose_name='Type MIME')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('type_evenement', models.CharField(choices=[('info_collective_presentiel', 'Information collective présentiel'), ('info_collective_distanciel', 'Information collective distanciel'), ('job_dating', 'Job dating'), ('evenement_emploi', 'Événement emploi'), ('forum', 'Forum'), ('jpo', 'Journée Portes Ouvertes (JPO)'), ('autre', 'Autre')], db_index=True, help_text="Catégorie de l'événement", max_length=100, verbose_name="Type d'événement")),
                ('details', models.TextField(blank=True, help_text="Informations complémentaires sur l'événement", null=True, verbose_name="Détails de l'événement")),
                ('event_date', models.DateField(blank=True, help_text="Date prévue pour l'événement", null=True, verbose_name="Date de l'événement")),
                ('description_autre', models.CharField(blank=True, help_text="Précision obligatoire si le type d'événement est 'Autre'", max_length=255, null=True, verbose_name="Description pour 'Autre' événement")),
                ('lieu', models.CharField(blank=True, help_text="Emplacement où se déroule l'événement", max_length=255, null=True, verbose_name='Lieu')),
                ('participants_prevus', models.PositiveIntegerField(blank=True, help_text='Nombre de participants attendus', null=True, verbose_name='Participants prévus')),
                ('participants_reels', models.PositiveIntegerField(blank=True, help_text="Nombre de participants réels (à remplir après l'événement)", null=True, verbose_name='Participants réels')),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom de la formation')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Date de début')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('num_kairos', models.CharField(blank=True, max_length=50, null=True, verbose_name='Numéro Kairos')),
                ('num_offre', models.CharField(blank=True, max_length=50, null=True, verbose_name="Numéro de l'offre")),
                ('num_produit', models.CharField(blank=True, max_length=50, null=True, verbose_name='Numéro du produit')),
                ('prevus_crif', models.PositiveIntegerField(default=0, verbose_name='Places prévues CRIF')),
                ('prevus_mp', models.PositiveIntegerField(default=0, verbose_name='Places prévues MP')),
                ('inscrits_crif', models.PositiveIntegerField(default=0, verbose_name='Inscrits CRIF')),
                ('inscrits_mp', models.PositiveIntegerField(default=0, verbose_name='Inscrits MP')),
                ('assistante', models.CharField(blank=True, max_length=255, null=True, verbose_name='Assistante')),
                ('cap', models.PositiveIntegerField(blank=True, null=True, verbose_name='Capacité maximale')),
                ('convocation_envoie', models.BooleanField(default=False, verbose_name='Convocation envoyée')),
                ('entresformation', models.PositiveIntegerField(default=0, verbose_name='Entrées en formation')),
                ('nombre_candidats', models.PositiveIntegerField(default=0, verbose_name='Nombre de candidats')),
                ('nombre_entretiens', models.PositiveIntegerField(default=0, verbose_name="Nombre d'entretiens")),
                ('nombre_evenements', models.PositiveIntegerField(default=0, verbose_name="Nombre d'événements")),
                ('dernier_commentaire', models.TextField(blank=True, null=True, verbose_name='Dernier commentaire')),
            ],
            options={
                'verbose_name': 'Formation',
                'verbose_name_plural': 'Formations',
                'ordering': ['-start_date', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueFormation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(default='modification', max_length=100)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('date_modification', models.DateTimeField(default=django.utils.timezone.now)),
                ('champ_modifie', models.CharField(default='non_specifié', max_length=100, verbose_name='Champ modifié')),
                ('ancienne_valeur', models.TextField(blank=True, null=True)),
                ('nouvelle_valeur', models.TextField(blank=True, null=True)),
                ('commentaire', models.TextField(blank=True, null=True, verbose_name='Commentaire lié à la modification')),
            ],
            options={
                'verbose_name': 'Historique de modification de formation',
                'ordering': ['-date_modification'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueProspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modification', models.DateTimeField(auto_now_add=True, help_text='Date à laquelle cette modification a été enregistrée', verbose_name='Date de modification')),
                ('ancien_statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], help_text='Statut avant la modification', max_length=20, verbose_name='Ancien statut')),
                ('nouveau_statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], help_text='Nouveau statut après la modification', max_length=20, verbose_name='Nouveau statut')),
                ('commentaire', models.TextField(blank=True, help_text='Commentaire associé à cette modification', null=True, verbose_name='Commentaire')),
                ('prochain_contact', models.DateField(blank=True, help_text='Date à laquelle un suivi devrait être effectué', null=True, verbose_name='Date de relance')),
                ('resultat', models.TextField(blank=True, help_text='Information sur le résultat de cette étape de prospection', null=True, verbose_name='Résultat ou retour de la prospection')),
                ('moyen_contact', models.CharField(blank=True, choices=[('email', 'Email'), ('telephone', 'Téléphone'), ('visite', 'Visite'), ('reseaux', 'Réseaux sociaux')], help_text='Moyen utilisé pour ce contact', max_length=50, null=True, verbose_name='Moyen de contact')),
            ],
            options={
                'verbose_name': 'Historique de prospection',
                'verbose_name_plural': 'Historiques de prospection',
                'ordering': ['-date_modification'],
            },
        ),
        migrations.CreateModel(
            name='Partenaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom', models.CharField(help_text="Nom officiel de l'entreprise ou de l'organisation partenaire", max_length=255, unique=True, verbose_name='Nom du partenaire')),
                ('secteur_activite', models.CharField(blank=True, help_text="Domaine d'activité principal du partenaire (ex: Santé, IT, Formation...)", max_length=255, null=True, verbose_name="Secteur d'activité")),
                ('contact_nom', models.CharField(blank=True, help_text='Nom de la personne à contacter chez le partenaire', max_length=255, null=True, verbose_name='Nom du contact')),
                ('contact_poste', models.CharField(blank=True, help_text="Fonction occupée par le contact au sein de l'organisation", max_length=255, null=True, verbose_name='Poste du contact')),
                ('contact_telephone', models.CharField(blank=True, help_text='Numéro de téléphone direct du contact', max_length=20, null=True, verbose_name='Téléphone du contact')),
                ('contact_email', models.EmailField(blank=True, help_text='Adresse email professionnelle du contact', max_length=254, null=True, verbose_name='Email du contact')),
                ('description', models.TextField(blank=True, help_text="Informations sur le partenariat et l'historique de la relation", null=True, verbose_name='Description de la relation')),
                ('slug', models.SlugField(blank=True, help_text='Identifiant unique pour les URLs (généré automatiquement)', max_length=255, null=True, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Partenaire',
                'verbose_name_plural': 'Partenaires',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='PrepaCompGlobal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annee', models.PositiveIntegerField()),
                ('total_candidats', models.PositiveIntegerField(default=0)),
                ('total_prescriptions', models.PositiveIntegerField(default=0)),
                ('total_presents', models.PositiveIntegerField(default=0)),
                ('total_places_ouvertes', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Prépa Comp Global',
                'verbose_name_plural': 'Prépas Comp Global',
            },
        ),
        migrations.CreateModel(
            name='Prospection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_prospection', models.DateTimeField(default=django.utils.timezone.now, help_text='Date à laquelle la prospection a été initiée', verbose_name='Date de la prospection')),
                ('motif', models.CharField(choices=[('POEI', 'POEI'), ('apprentissage', 'Apprentissage'), ('VAE', 'VAE'), ('partenariat', 'Établir un partenariat'), ('autre', 'Autre')], default='prise_contact', help_text='Raison principale de cette prospection', max_length=30, verbose_name='Motif de la prospection')),
                ('statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], default='a_faire', help_text='État actuel de la prospection', max_length=20, verbose_name='Statut de la prospection')),
                ('objectif', models.CharField(choices=[('prise_contact', 'Prise de contact'), ('rendez_vous', 'Obtenir un rendez-vous'), ('presentation_offre', 'Présentation d’une offre'), ('contrat', 'Signer un contrat'), ('partenariat', 'Établir un partenariat'), ('autre', 'Autre')], default='prise_contact', help_text='But visé par cette prospection', max_length=30, verbose_name='Objectif de la prospection')),
                ('commentaire', models.TextField(blank=True, help_text='Notes et observations sur la prospection', null=True, verbose_name='Commentaires de la prospection')),
            ],
            options={
                'verbose_name': 'Suivi de la prospection',
                'verbose_name_plural': 'Suivis des prospections',
                'ordering': ['-date_prospection'],
            },
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom du rapport')),
                ('type_rapport', models.CharField(choices=[('occupation', "Rapport d'occupation des formations"), ('centre', 'Rapport de performance par centre'), ('statut', 'Rapport de suivi des statuts'), ('evenement', "Rapport d'efficacité des événements"), ('recrutement', 'Rapport de suivi du recrutement'), ('partenaire', "Rapport d'activité des partenaires"), ('repartition', 'Rapport de répartition des partenaires'), ('periodique', 'Rapport périodique'), ('annuel', 'Rapport annuel consolidé'), ('utilisateur', "Rapport d'activité utilisateurs")], max_length=50, verbose_name='Type de rapport')),
                ('periode', models.CharField(choices=[('quotidien', 'Quotidien'), ('hebdomadaire', 'Hebdomadaire'), ('mensuel', 'Mensuel'), ('trimestriel', 'Trimestriel'), ('annuel', 'Annuel'), ('personnalise', 'Période personnalisée')], max_length=50, verbose_name='Périodicité')),
                ('date_debut', models.DateField(verbose_name='Date de début')),
                ('date_fin', models.DateField(verbose_name='Date de fin')),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('html', 'HTML')], default='html', max_length=10, verbose_name='Format')),
                ('donnees', models.JSONField(default=dict, verbose_name='Données du rapport')),
                ('date_generation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de génération')),
                ('temps_generation', models.FloatField(blank=True, null=True, verbose_name='Temps de génération (s)')),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Rapports',
                'ordering': ['-date_generation'],
            },
        ),
        migrations.CreateModel(
            name='Semaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
                ('numero_semaine', models.PositiveIntegerField()),
                ('mois', models.PositiveIntegerField()),
                ('annee', models.PositiveIntegerField()),
                ('objectif_hebdo_prepa', models.PositiveIntegerField(default=0)),
                ('nombre_candidats', models.PositiveIntegerField(default=0)),
                ('nombre_prescriptions', models.PositiveIntegerField(default=0)),
                ('nombre_adhesions', models.PositiveIntegerField(default=0)),
                ('nombre_presents', models.PositiveIntegerField(default=0)),
                ('nombre_places_ouvertes', models.PositiveIntegerField(default=0)),
                ('departements', models.JSONField(blank=True, default=dict, null=True)),
            ],
            options={
                'verbose_name': 'Semaine',
                'verbose_name_plural': 'Semaines',
                'ordering': ['-date_debut'],
            },
        ),
        migrations.CreateModel(
            name='Statut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom', models.CharField(choices=[('non_defini', 'Non défini'), ('recrutement_en_cours', 'Recrutement en cours'), ('formation_en_cours', 'Formation en cours'), ('formation_a_annuler', 'Formation à annuler'), ('formation_a_repousser', 'Formation à repousser'), ('formation_annulee', 'Formation annulée'), ('pleine', 'Pleine'), ('quasi_pleine', 'Quasi-pleine'), ('autre', 'Autre')], max_length=100, verbose_name='Nom du statut')),
                ('couleur', models.CharField(blank=True, help_text='Couleur hexadécimale (#RRGGBB).', max_length=7, verbose_name='Couleur')),
                ('description_autre', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description personnalisée')),
            ],
            options={
                'verbose_name': 'Statut',
                'verbose_name_plural': 'Statuts',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='TypeOffre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Dernière mise à jour')),
                ('nom', models.CharField(choices=[('crif', 'CRIF'), ('alternance', 'Alternance'), ('poec', 'POEC'), ('poei', 'POEI'), ('tosa', 'TOSA'), ('autre', 'Autre'), ('non_defini', 'Non défini')], default='non_defini', help_text="Sélectionnez le type d'offre de formation parmi les choix prédéfinis", max_length=100, verbose_name="Type d'offre")),
                ('autre', models.CharField(blank=True, help_text="Si vous avez choisi 'Autre', précisez le type d'offre personnalisé", max_length=255, verbose_name='Autre (personnalisé)')),
                ('couleur', models.CharField(default='#6c757d', help_text="Code couleur hexadécimal (ex: #FF5733) pour l'affichage visuel", max_length=7, verbose_name='Couleur associée (hexadécimal)')),
            ],
            options={
                'verbose_name': "Type d'offre",
                'verbose_name_plural': "Types d'offres",
                'ordering': ['nom'],
                'indexes': [models.Index(fields=['nom'], name='rap_app_typ_nom_d4cbe0_idx'), models.Index(fields=['autre'], name='rap_app_typ_autre_76e40c_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='typeoffre',
            constraint=models.UniqueConstraint(condition=models.Q(('autre__isnull', False), ('nom', 'autre')), fields=('autre',), name='unique_autre_non_null'),
        ),
        migrations.AddField(
            model_name='semaine',
            name='centre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rap_app.centre'),
        ),
        migrations.AddField(
            model_name='rapport',
            name='centre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.centre', verbose_name='Centre'),
        ),
        migrations.AddField(
            model_name='rapport',
            name='formation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rapports', to='rap_app.formation'),
        ),
        migrations.AddField(
            model_name='rapport',
            name='statut',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.statut', verbose_name='Statut'),
        ),
        migrations.AddField(
            model_name='rapport',
            name='type_offre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.typeoffre', verbose_name="Type d'offre"),
        ),
        migrations.AddField(
            model_name='rapport',
            name='utilisateur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Généré par'),
        ),
        migrations.AddField(
            model_name='prospection',
            name='company',
            field=models.ForeignKey(help_text='Entreprise ciblée par cette prospection', on_delete=django.db.models.deletion.CASCADE, related_name='prospections', to='rap_app.company', verbose_name='Entreprise'),
        ),
        migrations.AddField(
            model_name='prospection',
            name='formation',
            field=models.ForeignKey(blank=True, help_text='Formation associée à cette prospection (facultatif)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prospections', to='rap_app.formation', verbose_name='Formation en lien'),
        ),
        migrations.AddField(
            model_name='prospection',
            name='responsable',
            field=models.ForeignKey(blank=True, help_text='Personne en charge de cette prospection', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Responsable de la prospection'),
        ),
        migrations.AddField(
            model_name='prepacompglobal',
            name='centre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rap_app.centre'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['nom'], name='rap_app_par_nom_983061_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['secteur_activite'], name='rap_app_par_secteur_455cf4_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['slug'], name='rap_app_par_slug_09691e_idx'),
        ),
        migrations.AddField(
            model_name='historiqueprospection',
            name='modifie_par',
            field=models.ForeignKey(help_text='Utilisateur ayant effectué cette modification', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Modifié par'),
        ),
        migrations.AddField(
            model_name='historiqueprospection',
            name='prospection',
            field=models.ForeignKey(help_text='Prospection concernée par cet historique', on_delete=django.db.models.deletion.CASCADE, related_name='historiques', to='rap_app.prospection', verbose_name='Prospection'),
        ),
        migrations.AddField(
            model_name='historiqueformation',
            name='formation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historiques', to='rap_app.formation'),
        ),
        migrations.AddField(
            model_name='historiqueformation',
            name='modifie_par',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='formation',
            name='centre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='rap_app.centre', verbose_name='Centre de formation'),
        ),
        migrations.AddField(
            model_name='formation',
            name='partenaires',
            field=models.ManyToManyField(blank=True, related_name='formations', to='rap_app.partenaire', verbose_name='Partenaires'),
        ),
        migrations.AddField(
            model_name='formation',
            name='statut',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='rap_app.statut', verbose_name='Statut de la formation'),
        ),
        migrations.AddField(
            model_name='formation',
            name='type_offre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='rap_app.typeoffre', verbose_name="Type d'offre"),
        ),
        migrations.AddField(
            model_name='formation',
            name='utilisateur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='formations_creees', to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),
        ),
        migrations.AddField(
            model_name='evenement',
            name='formation',
            field=models.ForeignKey(blank=True, help_text='Formation à laquelle cet événement est rattaché', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evenements', to='rap_app.formation', verbose_name='Formation associée'),
        ),
        migrations.AddField(
            model_name='document',
            name='formation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='rap_app.formation', verbose_name='Formation associée'),
        ),
        migrations.AddField(
            model_name='document',
            name='utilisateur',
            field=models.ForeignKey(help_text='Utilisateur ayant téléchargé le document', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Téléchargé par'),
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),
        ),
        migrations.AddField(
            model_name='commentaire',
            name='formation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to='rap_app.formation', verbose_name='Formation'),
        ),
        migrations.AddField(
            model_name='commentaire',
            name='utilisateur',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur associé'),
        ),
        migrations.AddIndex(
            model_name='centre',
            index=models.Index(fields=['nom'], name='rap_app_cen_nom_671da5_idx'),
        ),
        migrations.AddIndex(
            model_name='centre',
            index=models.Index(fields=['code_postal'], name='rap_app_cen_code_po_c9960c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='semaine',
            unique_together={('numero_semaine', 'annee', 'centre')},
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['statut'], name='rap_app_pro_statut_84d25a_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['date_prospection'], name='rap_app_pro_date_pr_5d71cf_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['company'], name='rap_app_pro_company_bb2e93_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['formation'], name='rap_app_pro_formati_986a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['responsable'], name='rap_app_pro_respons_fb7ec5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prepacompglobal',
            unique_together={('annee', 'centre')},
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['prospection'], name='rap_app_his_prospec_f00db9_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['date_modification'], name='rap_app_his_date_mo_5b61b9_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['prochain_contact'], name='rap_app_his_prochai_5f80db_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['start_date'], name='rap_app_for_start_d_4c1834_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['end_date'], name='rap_app_for_end_dat_e7d2c9_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['nom'], name='rap_app_for_nom_27c494_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['event_date'], name='rap_app_eve_event_d_758395_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['type_evenement'], name='rap_app_eve_type_ev_11d24c_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['formation'], name='rap_app_eve_formati_3e51e7_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['nom_fichier'], name='rap_app_doc_nom_fic_b4d61d_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['formation'], name='rap_app_doc_formati_399b58_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['type_document'], name='rap_app_doc_type_do_ef9a30_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name'], name='company_name_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['city'], name='company_city_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['sector_name'], name='company_sector_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['zip_code'], name='company_zipcode_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['created_at'], name='rap_app_com_created_aad49b_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['formation'], name='rap_app_com_formati_0c3422_idx'),
        ),
    ]
